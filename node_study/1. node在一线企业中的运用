1. 作为中间层
    前端负责用户界面，后端负责提供数据和业务接口，现在比较流行的就是在两者中间加一层，前端并不是直接去请求后端业务接口，
    而是请求到中间层，再由中间层去请求业务接口（node可以高效的进行i/o）
    客户端请求-> node服务器 -> 拿到数据后去找对应模版结合成字符 -> 视图模版 -> 八戒和数据生成的字符串给客户端
    * 作为中间层的优点：
        - 减轻客户端内存，项目用户体验好，不会向mvvm一样把页面渲染和数据请求都压在客户端，而是在服务端完成
        - SEO性好，不像MVVM你模式页面由js生成，而是现在服务端渲染好html自负，有利于网页被搜索到
        - 保证了前后端的分离，后端可以专注于接口的形式写业务代码
          前后端分离的模式不止是物理层的区分，客户端上运行的就是前端，服务端运行的就是后端。
          这种想法现在已经无法满足前后端分离的模式。前端负责View层和Controller层，后端只
          负责Model层处理业务/数据，才是想要的真正的前后端分离的模式。
        - 前端可以操控的范围增多，奢恩智可以做服务端，数据库层面的优化，比如用nginx，redis来优化项目，应对高并发
2. 做项目的构建工具
3. 中小型网站直接做后端